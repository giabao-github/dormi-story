// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  studentId String @unique
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String
  messengerSecretToken String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversationIds String[] @db.ObjectId
  conversations Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[] @db.ObjectId
  seenMessages Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  sentFriendRequests    Friend[] @relation("sentRequests")
  receivedFriendRequests Friend[] @relation("receivedRequests")

  messages Message[]
  report Report[]
  survey Survey[]
  event Event[]
  article Article[]
  building Building[]
  parkingSpot ParkingSpot[]

  @@index([messengerSecretToken], map: "User_messengerSecretToken_key")
}

model Report {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  reporterName String
  reporterStudentId String
  time String
  location String
  category String
  description String
  proofSrc String
  createdAt DateTime @default(now())
  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Article {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  category String
  title String
  author String
  introduction String
  content String
  files String
  tags String
  sources String
  createdAt DateTime @default(now())
  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Survey {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  category String
  title String
  creator String
  description String
  link String
  createdAt DateTime @default(now())
  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  category String
  title String
  creator String
  description String
  link String
  createdAt DateTime @default(now())
  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Building {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  capacity Int
  availableSpots Int
  price Int
  parkingSpot ParkingSpot[]
  userId String @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ParkingSpot {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String? @db.ObjectId
  buildingId String @db.ObjectId
  month Int?
  startDate DateTime?
  endDate DateTime?
  licensePlateImage String?
  spot String?
  status String
  registeredAt DateTime?
  expiresAt DateTime?
  price Int?
  paid Boolean?
  bill String?
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  building Building @relation(fields: buildingId, references: id)
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name String?
  isGroup Boolean?

  messagesIds String[] @db.ObjectId
  messages Message[]

  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds], references: [id])
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  image String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen User[] @relation("Seen", fields: [seenIds], references: [id])

  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Friend {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  senderId String @db.ObjectId
  receiverId String @db.ObjectId
  status String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sender User @relation("sentRequests", fields: [senderId], references: [id])
  receiver User @relation("receivedRequests", fields: [receiverId], references: [id])
}