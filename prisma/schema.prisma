// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  studentId String @unique
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account Account[]
  personalInformation PersonalInformation[]
  report Report[]
  article Article[]
  parkingLotRegistration ParkingLotRegistration[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  university String
  universityAccountId String
  messengerSecretToken String @unique
  refreshToken String? @db.String
  accessToken String? @db.String
  expiresAt Int?
  tokenType String?
  scope String?
  idToken String? @db.String
  sessionState String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([university, universityAccountId])
}

model PersonalInformation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  name String
  dateOfBirth DateTime?
  nationalIdNumber String
  placeOfOrigin String?
  placeOfResidence String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Report {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  reporterName String
  reporterStudentId String
  time String
  location String
  category String
  description String
  proofSrc String
  createdAt DateTime @default(now())
  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Article {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  category String
  title String
  author String
  introduction String
  content String
  files String
  tags String
  sources String
  createdAt DateTime @default(now())
  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model ParkingLotRegistration {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  startDate DateTime
  endDate DateTime
  price Int
  licensePlateImage String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}